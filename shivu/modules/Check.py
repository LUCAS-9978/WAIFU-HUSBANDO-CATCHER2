import random
import string
from telegram import Update
from telegram.ext import CommandHandler, CallbackContext
from telegram.constants import ParseMode
from shivu import application, sudo_users, collection, user_collection, PARTNER

# Dictionary to store last usage time and generated waifus
last_usage_time = {}
generated_waifus = {}
claimed_waifus = {}

# Function to generate a random string of length 5
def generate_random_code():
    return ''.join(random.choices(string.ascii_lowercase + string.digits, k=5))

# Function to handle the waifugen command
async def waifugen(update: Update, context: CallbackContext):
    if str(update.effective_user.id) not in PARTNER:
        await update.message.reply_text("You are not authorized to use this command.")
        return

    try:
        waifu_id = context.args[0]
        quantity = int(context.args[1])
    except (IndexError, ValueError):
        await update.message.reply_text("Invalid usage. Usage: /ngen <id> <quantity>")
        return

    waifu = await collection.find_one({'id': waifu_id})
    if not waifu:
        await update.message.reply_text("Invalid waifu ID.")
        return

    code = generate_random_code()
    generated_waifus[code] = {'waifu': waifu, 'quantity': quantity}

    response_text = (
        f"Generated character:\n`{code}`\n"
        f"Name: {waifu['name']}\nRarity: {waifu['rarity']}\nQuantity: {quantity}\n"
        f"For redeem: /redeem {code}"
    )

    await update.message.reply_text(response_text, parse_mode=ParseMode.MARKDOWN)

    log_text = (
        f"Character generated by user {update.effective_user.id}:\n"
        f"Code: {code}\nName: {waifu['name']}\nRarity: {waifu['rarity']}\nQuantity: {quantity}"
    )
    for log_user_id in PARTNER:
        await context.bot.send_message(chat_id=log_user_id, text=log_text)

# Function to claim a generated waifu
async def claimwaifu(update: Update, context: CallbackContext):
    code = " ".join(context.args)
    user_id = update.effective_user.id
    user_mention = f"[{update.effective_user.first_name}](tg://user?id={user_id})"

    if code in generated_waifus:
        details = generated_waifus[code]

        if user_id in claimed_waifus.get(code, []):
            await update.message.reply_text("You have already claimed this waifu code.")
            return

        if details['quantity'] > 0:
            waifu = details['waifu']
            await user_collection.update_one(
                {'id': user_id},
                {'$push': {'characters': waifu}}
            )

            details['quantity'] -= 1
            claimed_waifus.setdefault(code, []).append(user_id)

            if details['quantity'] == 0:
                del generated_waifus[code]
                del claimed_waifus[code]

            response_text = (
                f"Congratulations {user_mention}! You have received a new waifu for your harem 💍!\n"
                f"Name: {waifu['name']}\nRarity: {waifu['rarity']}\nAnime: {waifu['anime']}\n"
            )
            await update.message.reply_photo(photo=waifu['img_url'], caption=response_text, parse_mode=ParseMode.MARKDOWN)

            log_text = (
                f"Waifu claimed by user {user_id}:\n"
                f"Code: {code}\nName: {waifu['name']}\nRarity: {waifu['rarity']}\nRemaining quantity: {details['quantity']}"
            )
            for log_user_id in PARTNER:
                await context.bot.send_message(chat_id=log_user_id, text=log_text)
        else:
            await update.message.reply_text("This code has already been claimed the maximum number of times.")
    else:
        await update.message.reply_text("Invalid code.")

# Add command handlers to the bot
application.add_handler(CommandHandler("cgen", waifugen))
application.add_handler(CommandHandler("redeem", claimwaifu))

async def check_total_characters(update: Update, context: CallbackContext) -> None:
    try:
        total_characters = await collection.count_documents({})
        await update.message.reply_text(f"Total number of characters: {total_characters}")
    except Exception as e:
        await update.message.reply_text(f"Error occurred: {e}")

application.add_handler(CommandHandler("total", check_total_characters))
